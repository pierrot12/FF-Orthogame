import React, { useState } from 'react';
import { BookOpen, Plus, CheckCircle, Trash2 } from 'lucide-react';
import { createExercise, updateExercise } from '../services/api';
import ConjugationModal from './ConjugationModal';

export default function CreateExercise({ currentUsername, editingExercise, onSuccess, onCancel }) {
  const [newExercise, setNewExercise] = useState(
    editingExercise ? { name: editingExercise.name, words: [...editingExercise.words] } : { name: '', words: [] }
  );
  const [newWord, setNewWord] = useState({ text: '', type: 'simple', conjugation: null });
  const [showConjugationModal, setShowConjugationModal] = useState(false);
  const [conjugationData, setConjugationData] = useState(null);

  const getConjugationText = (conjugation) => {
    const texts = {
      present: 'au pr√©sent',
      futur: 'au futur',
      imparfait: "√† l'imparfait",
      passe_compose: 'au pass√© compos√©'
    };
    return texts[conjugation] || '';
  };

  const addWordToExercise = () => {
    if (!newWord.text.trim()) return;
    setNewExercise({
      ...newExercise,
      words: [...newExercise.words, { ...newWord }]
    });
    setNewWord({ text: '', type: 'simple', conjugation: null });
  };

  const handleAddWord = () => {
    if (!newWord.text.trim()) return;
    
    // Ouvrir le modal de conjugaison pour TOUS les verbes (peu importe le temps)
    if (newWord.type === 'verb') {
      setConjugationData({ je: '', tu: '', il: '', nous: '', vous: '', ils: '' });
      setShowConjugationModal(true);
    } else {
      addWordToExercise();
    }
  };

  const confirmConjugation = () => {
    const wordWithConjugation = {
      ...newWord,
      conjugatedForms: conjugationData,
      autoGenerated: false
    };
    
    setNewExercise({
      ...newExercise,
      words: [...newExercise.words, wordWithConjugation]
    });
    
    setNewWord({ text: '', type: 'simple', conjugation: null });
    setConjugationData(null);
    setShowConjugationModal(false);
  };

  const removeWordFromExercise = (index) => {
    setNewExercise({
      ...newExercise,
      words: newExercise.words.filter((_, i) => i !== index)
    });
  };

  const handleSaveExercise = async () => {
    if (!newExercise.name.trim() || newExercise.words.length === 0) return;
    
    if (editingExercise) {
      await updateExercise(editingExercise._id, { ...newExercise, createdBy: currentUsername });
    } else {
      await createExercise({ ...newExercise, createdBy: currentUsername });
    }
    
    onSuccess();
  };

  return (
    <>
      <div className="min-h-screen p-4" style={{background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'}}>
        <div className="max-w-4xl mx-auto">
          <div className="backdrop-blur-xl bg-white/95 border border-white/30 rounded-3xl shadow-2xl p-8">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent flex items-center space-x-2">
                <BookOpen className="w-8 h-8 text-blue-600" />
                <span>{editingExercise ? 'Modifier' : 'Cr√©er'} un exercice</span>
              </h2>
              <button 
                onClick={onCancel}
                className="text-gray-600 hover:text-gray-800 font-semibold"
              >
                Retour
              </button>
            </div>

            <div className="space-y-6">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Nom de l'exercice</label>
                <input
                  type="text"
                  placeholder="Ex: Les mots en -eau"
                  value={newExercise.name}
                  onChange={(e) => setNewExercise({ ...newExercise, name: e.target.value })}
                  className="w-full px-5 py-3 rounded-xl border-2 border-blue-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 outline-none text-lg transition-all"
                />
              </div>

              <div className="border-2 border-dashed border-gray-300 rounded-xl p-6 space-y-4 bg-gradient-to-br from-purple-50 to-pink-50">
                <h3 className="text-xl font-semibold text-gray-700 flex items-center space-x-2">
                  <Plus className="w-6 h-6" />
                  <span>Ajouter un mot</span>
                </h3>
                
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Mot ou verbe (infinitif)</label>
                  <input
                    type="text"
                    placeholder="Ex: ch√¢teau ou manger"
                    value={newWord.text}
                    onChange={(e) => setNewWord({ ...newWord, text: e.target.value })}
                    className="w-full px-4 py-3 rounded-lg border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 outline-none transition-all"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Type</label>
                    <select
                      value={newWord.type}
                      onChange={(e) => setNewWord({ ...newWord, type: e.target.value, conjugation: e.target.value === 'simple' ? null : 'present' })}
                      className="w-full px-4 py-3 rounded-lg border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 outline-none transition-all"
                    >
                      <option value="simple">Mot simple</option>
                      <option value="verb">Verbe √† conjuguer</option>
                    </select>
                  </div>

                  {newWord.type === 'verb' && (
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">Temps</label>
                      <select
                        value={newWord.conjugation}
                        onChange={(e) => setNewWord({ ...newWord, conjugation: e.target.value })}
                        className="w-full px-4 py-3 rounded-lg border-2 border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 outline-none transition-all"
                      >
                        <option value="present">Pr√©sent</option>
                        <option value="futur">Futur</option>
                        <option value="imparfait">Imparfait</option>
                        <option value="passe_compose">Pass√© compos√©</option>
                      </select>
                    </div>
                  )}
                </div>

                <button
                  onClick={handleAddWord}
                  className="w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white py-3 rounded-xl font-semibold hover:shadow-lg transition-all transform hover:scale-105 flex items-center justify-center space-x-2"
                >
                  <Plus className="w-5 h-5" />
                  <span>Ajouter le mot</span>
                </button>
              </div>

              {newExercise.words.length > 0 && (
                <div className="space-y-3">
                  <h3 className="text-xl font-semibold text-gray-700 flex items-center space-x-2">
                    <CheckCircle className="w-6 h-6 text-green-600" />
                    <span>Mots ajout√©s ({newExercise.words.length})</span>
                  </h3>
                  <div className="max-h-64 overflow-y-auto space-y-2" style={{paddingRight: '8px'}}>
                    {newExercise.words.map((word, index) => (
                      <div key={index} className="flex items-center justify-between bg-gradient-to-r from-gray-50 to-gray-100 p-4 rounded-xl border border-gray-200 hover:border-gray-300 transition-all">
                        <div>
                          <span className="font-bold text-lg">{word.text}</span>
                          {word.type === 'verb' && (
                            <span className="ml-3 text-sm text-gray-600 bg-purple-100 px-3 py-1 rounded-full">
                              {getConjugationText(word.conjugation)}
                              {word.conjugatedForms && ' ‚ú®'}
                            </span>
                          )}
                        </div>
                        <button
                          onClick={() => removeWordFromExercise(index)}
                          className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition"
                        >
                          <Trash2 className="w-5 h-5" />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <button
                onClick={handleSaveExercise}
                disabled={!newExercise.name.trim() || newExercise.words.length === 0}
                className="w-full bg-gradient-to-r from-green-500 to-emerald-500 text-white py-4 rounded-xl font-bold text-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105 active:scale-95 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {editingExercise ? 'Mettre √† jour' : 'Enregistrer'} l'exercice üíæ
              </button>
            </div>
          </div>
        </div>
      </div>

      {showConjugationModal && conjugationData && (
        <ConjugationModal
          verb={newWord.text}
          conjugation={newWord.conjugation}
          conjugationData={conjugationData}
          setConjugationData={setConjugationData}
          onConfirm={confirmConjugation}
          onCancel={() => {
            setShowConjugationModal(false);
            setConjugationData(null);
          }}
        />
      )}
    </>
  );
}